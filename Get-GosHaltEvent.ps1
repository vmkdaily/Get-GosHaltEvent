#requires -version 5.1
#requires -module VMware.VimAutomation.Core

Function Get-GosHaltEvent {

  <#

      .SYNOPSIS
        Performs Get-VIEvent to find any guest operating systems that experienced a halted os.
        
      .NOTES
        Script:     Get-GosHaltEvent.ps1
        Author:     Mike Nisk
        Prior Art:  Based on Get-VIEvent by VMware,Inc.

      .DESCRIPTION
        Performs Get-VIEvent to find any guest operating systems that experienced a halted os.
        No permission to the guest is needed.  However, you will need permission to read the
        virtual machine events.
        
        We are parsing events from VimApi Event objects which means this is not directly accessing
        vmware.log for the virtual machine.  This is reading in what the system deems important
        enough to aggregate into the logs you would see in the vSphere client > virtual machine > events.
        This means you cannot search for 'vmx has left the building' because that only exists at the
        vmware.log level.  
        
        By default we read in the logs and match on the common search terms:

          'CPU has been disabled | reset by vSphere HA'
        
        Feel free to customize the script to search for what you want by default.  Alternatively,
        you can populate the Message parameter with the desired search term.

        You should already be connected to vCenter and already have the desired VMs to search
        for in a variable (i.e. $VMs = Get-VM). Then you can pass that variable to the Entity
        parameter.  See the examples for more details.

      .PARAMETER Entity
        One or more virtual machine objects.  For example $VMs = Get-VM.  Then populate the
        Entity parameter with $VMs.  See the examples for more.
        
        Note:
          By default we expect one or more VMs for Entity because we are
          looking for halt events generated by the GOS and trapped by the VM logs.
        
          Not documented herein, but you can optionally pass any VIObject (host,
          cluster, resource pool, etc.) to the Entity parameter. In such a case,
          (i.e. when Entity is not a VM) you would want to also populate the Message
          parameter to provide what you want to match from the logs on the target Entity.
      
      .PARAMETER Start
        DateTime.  Search logs from this start time.  Default is past day.

      .PARAMETER Finish
        DateTime.  Search logs until this Finish time.  Default is now.

      .PARAMETER MaxSamples
        Integer.  Maximum number of events to parse.  The default is 10000.
      
      .PARAMETER Types
        Optionally, enter the event type.
      
      .PARAMETER Message
        optionally, enter a custom string to match on.

      .PARAMETER PassThru
        Returns the full VimApi.Event object

      .EXAMPLE
      . c:\testMods\Get-GosHaltEvent.ps1
      Get-GosHaltEvent -Entity (Get-VM TestVM01)
      This example dot sources the function and then runs the defaults.

      .EXAMPLE
      Import-Module c:\testMods\Get-GosHaltEvent.ps1 -verbose
      Get-GosHaltEvent -Entity (Get-VM TestVM01)
      This example uses Import-Module to dot source the function and then runs the defaults.

      .EXAMPLE
      Connect-VIServer vcva01.lab.local
      $VMs = Get-VM
      Get-GosHaltEvent -Entity $VMs -Message 'my custom search'
      This example shows the full process of connecting to vCenter, creating a variable
      for the desired virtual machines, and finally searching the logs for matches of
      the string passed to the Message parameter. The Message parameter is optional.
      By default we search for halt events if the Message parameter is not populated.

      .EXAMPLE
      $vm = Get-VM TestVM01 -Start (Get-Date).AddDays(-7)
      Get-GosHaltEvent -Entity $vm

      CreatedTime         FullFormattedMessage
      -----------         --------------------
      9/7/2017 1:17:59 AM Message on TESTVM01 on esx01.lab.local in LabDataCenter: The CPU has been disabled by the guest operating system. Power off or reset the virtual machin...

      .EXAMPLE
      Get-GosHaltEvent -Entity (Get-VM TESTVM01) -PassThru
      
      Message              : The CPU has been disabled by the guest operating system. Power off or reset the virtual machine.
      MessageInfo          : {msg.monitorevent.halt}
      Template             : False
      Key                  : 35883052
      ChainId              : 35883052
      CreatedTime          : 9/7/2017 1:13:17 AM
      UserName             : User
      Datacenter           : VMware.Vim.DatacenterEventArgument
      ComputeResource      : VMware.Vim.ComputeResourceEventArgument
      Host                 : VMware.Vim.HostEventArgument
      Vm                   : VMware.Vim.VmEventArgument
      Ds                   :
      Net                  :
      Dvs                  :
      FullFormattedMessage : Message on TESTVM01 on esx01.lab.local in LabDataCenter: The CPU has been disabled by the guest operating system. Power off or reset the virtual machine.
      ChangeTag            :

      .EXAMPLE
      $report = Get-GosHaltEvent -Entity $vm -PassThru
      $report.GetType()

      IsPublic IsSerial Name                                     BaseType
      -------- -------- ----                                     --------
      True     False    VmMessageEvent                           VMware.Vim.VmEvent

      .EXAMPLE
      $VMs = Get-VM -Location (Get-Folder 'My Test VMs')
      Get-GosHaltEvent -Entity $VMs -Message 'Remote console connected'
      This example searches the virtual machines in the 'My Test VMs' folder for the Message text provided.
      
      .EXAMPLE
      PS C:\> Get-GosHaltEvent -Entity (Get-VM) -Message 'Tools heartbeat failure' -Start (Get-Date).AddDays(-30)

      CreatedTime           FullFormattedMessage
      -----------           --------------------
      9/10/2017 11:41:54 PM Demo 2008R2 on esx03.lab.local in cluster Mac Pro in AppleLabs reset by vSphere HA.
                            Reason: VMware Tools heartbeat failure.
                            A screenshot is saved at [big-nas] Demo2008R2-01/Demo2008R2-01-1.png.

      In this example, we review the virtual machine log for a VM I have already intentionally crashed.
      Here we can see some example output related to the event. You should review the logs after major
      events with your virtual machines. 

      ABOUT OUTPUTS
        By default we return string property results for CreatedTime and FullFormattedMessage.
        Howevever, if the PassThru parameter is used, we return the entire object. In both cases,
        the name of the VM is included in the FullFormattedMessage property, as a finalized string
        along with other information such as host and datacenter. We keep this format as this is the
        default for the underlying VMware cmdlet we consume (Get-VIEvent).

      .INPUTS

      .OUTPUTS
      String               
      Zero or more VimApi.Event objects
 
  #>
  
  [CmdletBinding(DefaultParameterSetName='DefaultSet')]
  Param(
  
    [Parameter(ParameterSetName='DefaultSet', Position=0, ValueFromPipeline=$true)]
    [VMware.VimAutomation.Sdk.Types.V1.VIObject[]]$Entity,

    #DateTime. Optionally set the Start time.  Default is past day.
    [Parameter(ParameterSetName='DefaultSet')]
    [System.Nullable[datetime]]$Start = ((Get-Date).AddDays(-1)),

    #DateTime. Optionally set the Finish time.  Default is now.
    [Parameter(ParameterSetName='DefaultSet')]
    [System.Nullable[datetime]]$Finish = (Get-Date),

    #Integer. Optionally, set the maximum number of samples to parse.
    [Parameter(ParameterSetName='DefaultSet')]
    [ValidateRange(1, 2147483647)]
    [int]$MaxSamples = 100000,

    #String.  Optionally, enter one or more log types to search for. Valid options are 'Error','Info', and 'Warning'.
    [Parameter(ParameterSetName='DefaultSet')]
    [ValidateSet('Error','Info','Warning')]
    [Alias('Type')]
    [VMware.VimAutomation.ViCore.Types.V1.EventCategory[]]$Types,

    #String. Optionally, enter a message to search for in the virtual machine logs.
    [String]$Message,
    
    #Switch. Returns the full VimApi.Event object.
    [Parameter(ParameterSetName='DefaultSet')]
    [switch]$PassThru
  )
  
  Process {

    #Default matches. Customize by separating with pipe. This is read later as regex.
    [string]$DefaultEvents = 'CPU has been disabled | reset by vSphere HA'

    #Handle custom Message to search for if any
    If($Message){
      try{
        $result = Get-VIEvent -Entity $Entity -Start $Start -Finish $Finish -MaxSamples $MaxSamples -ErrorAction Stop | Where-Object {$_.FullFormattedMessage -match $Message}
      }
      catch{
        Write-Error -Message $Error[0].exception.Message
      }
    }
    Else{
      #Splat the params. This is the default if Message parameter is not populated.
      If($PassThru){
      
        #Create a variable indicating PassThru mode (for use outside of the splat stream).
        [bool]$PassThruActive = $true
        
        #Remove private param since Get-VIEvent does not understand it
        $null = $PSBoundParameters.Remove('PassThru')
      }
      try{
        $result = Get-VIEvent @PSBoundParameters -ErrorAction Stop | Where-Object {$_.FullFormattedMessage -match $DefaultEvents}
      }
      catch{
        Write-Error -Message $Error[0].exception.Message
      }
    }
  } #End Process
  End {
    If($result){
      If($PassThru -or $PassThruActive){
        return $result
      }
      Else {
        $result | Select-Object -Property CreatedTime,FullFormattedMessage
      }
    } #End If
  } #End End
} #End Function
